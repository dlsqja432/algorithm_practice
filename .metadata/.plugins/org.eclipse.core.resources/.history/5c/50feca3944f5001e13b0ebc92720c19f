package stack;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;
import java.util.StringTokenizer;

// 백준 6549번 히스토그램에서 가장 큰 직사각형
public class Ex07 {
	static int n;
	static long[] num;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;
		String s;
		
		while(!(s=br.readLine()).equals("0")) {
			Stack<Integer> stack = new Stack<>();
			st = new StringTokenizer(s);
			n = Integer.parseInt(st.nextToken());
			num = new long[n];
			for(int i=0; i<n; i++) {
				num[i] = Long.parseLong(st.nextToken());
			}
			long maxArea = 0;
			
			for(int i=0; i<n; i++) {
//				이전 높이보다 현재 높이가 작거나 같은 경우
//				현재 높이보다 작은 이전 높이들을 pop 하면서 넓이를 구한다.
				while(!stack.isEmpty() && num[stack.peek()] >= num[i]) {
					long height = num[stack.pop()];
					
//					다음으로 pop 하는 인덱스의 높이는 현재 pop 한 높이보다 반드시 낮으므로
//					너비는 1부터 다음 pop 할 인덱스 전까지가 된다.
//					스택에 값이 없다면 1 ~ i 이므로 i 가 된다.
				}
				stack.push(i);
			}
		}
	}
}











