package bfs;
//백준 4179번 불!

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class dist {
	int x;
	int y;
	
	public dist(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Ex04 {
	
	static char[][] maze = new char[1001][1001];
	static int[][] fdist = new int[1001][1001]; 
	static int[][] jdist = new int[1001][1001]; 
	static boolean[][] fvis = new boolean[1001][1001];
	static int[] dx = {1, 0, -1, 0};
	static int[] dy = {0, 1, 0, -1};
	static Queue<Pair> queue = new LinkedList<>();
	static ArrayList<Pair> pArr = new ArrayList<>();
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int ax = 0;
		int bx = 0;
		
		for(int i=0; i<n; i++) {
			String s = br.readLine();
			for(int j=0; j<m; j++) {
				maze[i][j] = s.charAt(j);
				fdist[i][j] = -1;
				if(s.charAt(j) == 'F') {
					queue.add(new Pair(i,j));
					fvis[i][j] = true;
					fdist[i][j] = 0;
				}
				if(s.charAt(j) == 'J') {
					ax = i;
					bx = j;
				}
			}
		}
		
		while(!queue.isEmpty()) {
			Pair cur = queue.peek();
			queue.poll();
			for(int i=0; i<4; i++) {
				int nx = cur.x + dx[i];
				int ny = cur.y + dy[i];
				if(nx<0 || nx>=n || ny<0 || ny>=m) continue;
				if(fvis[nx][ny] || maze[nx][ny] == '#') continue;
				fdist[nx][ny] = fdist[cur.x][cur.y] + 1;
				fvis[nx][ny] = true;
				queue.add(new Pair(nx, ny));
			}
		}
		queue.add(new Pair(ax, bx));
		
		while(!queue.isEmpty()) {
			Pair cur = queue.peek();
			queue.poll();
			int count = 4;
			for(int i=0; i<4; i++) {
				int nx = cur.x + dx[i];
				int ny = cur.y + dy[i];
				if(nx<0 || nx>=n || ny<0 || ny>=m) {
					System.out.println(jdist[cur.x][cur.y]+1);
					return;
				}
				if(maze[nx][ny] == '#' || fdist[nx][ny] >= jdist[cur.x][cur.y]+1) {
					count--;
					System.out.println(nx + " " + ny);
					continue;
				}
				jdist[nx][ny] = jdist[cur.x][cur.y]+1;
				maze[cur.x][cur.y] = '#';
				queue.add(new Pair(nx, ny));
			}
			if(count == 0) {
				System.out.println("IMPOSSIBLE");
				return;
			}
		}
	}
}
