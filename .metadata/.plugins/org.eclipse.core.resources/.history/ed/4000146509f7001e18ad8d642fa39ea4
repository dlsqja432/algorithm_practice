package bfs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Ex01 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		Queue<Integer> queue = new LinkedList<>();
		HashMap<Integer, Integer> pair = new HashMap<>();
		int[] dx = {1, 0, -1, 0};
		int[] dy = {0, 1, 0, -1};
		
		int[][] board = new int[n][m];
		boolean[][] visited = new boolean[n][m];  
		
		
		// 2차원 배열에 값 입력
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				st = new StringTokenizer(br.readLine());
				board[i][j] = Integer.parseInt(st.nextToken());
				visited[i][j] = false;
			}
		}
		
		// 처음 방문할 그림 찾기
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(board[i][j] == 1) {
					visited[i][j] = true;
				}
			}
		}
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(board[i][j] == 1 && visited[i][j]) {
					while(!queue.isEmpty()) {
						
					}
				}
			}
		}
	}
}
